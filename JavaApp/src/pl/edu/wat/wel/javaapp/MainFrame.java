/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package pl.edu.wat.wel.javaapp;
        
import com.fazecast.jSerialComm.SerialPort;

/**
 *
 * @author Pawe≈Ç
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    SerialPort sp=null;
    public MainFrame() {
        initComponents(); //
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        checkbox1 = new java.awt.Checkbox();
        ISerialPortSelect = new javax.swing.JLabel();
        cbSerialPortSelect = new javax.swing.JComboBox<>();
        ISerialPortBaudrate = new javax.swing.JLabel();
        tfSerialPortBaudrate = new javax.swing.JTextField();
        bSerialPortConnect = new javax.swing.JButton();
        ICmdSelect = new javax.swing.JLabel();
        cbCmdSelect = new javax.swing.JComboBox<>();
        ICmdValue = new javax.swing.JLabel();
        tfCmdValues = new javax.swing.JTextField();
        ICmdText = new javax.swing.JLabel();
        tfCmdText = new javax.swing.JTextField();
        ICmdType = new javax.swing.JLabel();
        rbCmdTypeSet = new javax.swing.JRadioButton();
        rbCmdTypeGet = new javax.swing.JRadioButton();
        bCmdSend = new javax.swing.JButton();
        ICmdResponse = new javax.swing.JLabel();
        tfCmdResponse = new javax.swing.JTextField();

        checkbox1.setLabel("checkbox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Java App - Pawel Slapczynski");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        ISerialPortSelect.setText("Serial port selected:");

        cbSerialPortSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSerialPortSelectActionPerformed(evt);
            }
        });

        ISerialPortBaudrate.setText("Baudrarte:");

        tfSerialPortBaudrate.setText("115200");
        tfSerialPortBaudrate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSerialPortBaudrateActionPerformed(evt);
            }
        });

        bSerialPortConnect.setText("Connected");
        bSerialPortConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSerialPortConnectActionPerformed(evt);
            }
        });

        ICmdSelect.setText("CMD");

        ICmdValue.setText("Values:");

        tfCmdValues.setText("0x00;0x00;0x00");

        ICmdText.setText("Text:");

        tfCmdText.setText("Demo");

        ICmdType.setText("Command type:");

        buttonGroup1.add(rbCmdTypeSet);
        rbCmdTypeSet.setSelected(true);
        rbCmdTypeSet.setText("Set");

        buttonGroup1.add(rbCmdTypeGet);
        rbCmdTypeGet.setText("Get");

        bCmdSend.setText("Send command");
        bCmdSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCmdSendActionPerformed(evt);
            }
        });

        ICmdResponse.setText("Read values:");

        tfCmdResponse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCmdResponseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bCmdSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ISerialPortSelect)
                            .addComponent(ISerialPortBaudrate))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfSerialPortBaudrate, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbSerialPortSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(bSerialPortConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ICmdResponse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfCmdResponse, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ICmdSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ICmdValue, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ICmdText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfCmdValues, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                                    .addComponent(cbCmdSelect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tfCmdText)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ICmdType)
                                .addGap(32, 32, 32)
                                .addComponent(rbCmdTypeSet)
                                .addGap(40, 40, 40)
                                .addComponent(rbCmdTypeGet)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSerialPortSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ISerialPortSelect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSerialPortBaudrate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ISerialPortBaudrate))
                .addGap(7, 7, 7)
                .addComponent(bSerialPortConnect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbCmdSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ICmdSelect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfCmdValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ICmdValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfCmdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ICmdText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ICmdType, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rbCmdTypeGet)
                        .addComponent(rbCmdTypeSet)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bCmdSend)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfCmdResponse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ICmdResponse))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfCmdResponseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCmdResponseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfCmdResponseActionPerformed

    private void tfSerialPortBaudrateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSerialPortBaudrateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfSerialPortBaudrateActionPerformed

    private void cbSerialPortSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSerialPortSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbSerialPortSelectActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
     //otwarcie okna aplikacji 
     var serialPorts = SerialPort.getCommPorts();//zwraca tablice dostepnych port√≥w 
     for (SerialPort port : serialPorts) {
        cbSerialPortSelect.addItem(port.getSystemPortName());//wypisuje wsztkie dostƒôpne porty w polu cbSerialPortSelect
    }//GEN-LAST:event_formWindowOpened
    for (CmdType i : CmdType.values()) {
    cbCmdSelect.addItem(i.toString());
    //System.out.println(i); //wypisuje wsztkie dostƒôpne porty w polu cbCmdPortSelect
    }
    }
    
    private void bSerialPortConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSerialPortConnectActionPerformed
       
        if (sp == null) {
            sp = SerialPort.getCommPort((String) cbSerialPortSelect.getSelectedItem());//przypisuje wybrany z listy port com;
            sp.setBaudRate(Integer.parseInt(tfSerialPortBaudrate.getText()));//ustawienie prƒôdko≈õci trnasmisji
            sp.setNumDataBits(8);//u
            sp.setNumStopBits(1);
            sp.setParity(0);
            sp.openPort();
            sp.setComPortTimeouts(SerialPort.TIMEOUT_READ_SEMI_BLOCKING, 0, 0);
            //sp.setComPortTimeouts(SerialPort.TIMEOUT_READ_BLOCKING, 50, 0);
            bSerialPortConnect.setText("Disconnect");
        }else {
            sp.closePort();
            sp = null;
            bSerialPortConnect.setText("Connect");
    }//GEN-LAST:event_bSerialPortConnectActionPerformed
    }
    private void bCmdSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCmdSendActionPerformed
      if (sp != null && sp.isOpen()){
                    
           if (rbCmdTypeSet.isSelected()) {
                
                if (sp != null && sp.isOpen()) {
            byte[] readEcho = new byte[64];
            int cmdIndex = cbCmdSelect.getSelectedIndex();
            String cmdValues = tfCmdValues.getText();
            String cmdText = tfCmdText.getText();
            boolean cmdTypeSet = rbCmdTypeSet.isSelected();
            String cmdResponse = "";
            boolean cmdSstatus = false;
                
            //StringBuilder cmd = new StringBuilder((String) cbCmdSelect.getSelectedItem());
            String cmd = Protocol.getCmd(cmdIndex, cmdValues, cmdText, cmdTypeSet);
            sp.writeBytes(cmd.getBytes(), cmd.length());
            sp.setComPortTimeouts(SerialPort.TIMEOUT_READ_BLOCKING, 50, 0);
            
            sp.readBytes(readEcho, cmd.length() + 4);
                // Read echo
            cmdResponse = new String(readEcho);
            cmdSstatus = Protocol.checkResponse(cmdIndex, cmdResponse);
                       
            if (cmdTypeSet) {   
                if(cmdSstatus) {
                    tfCmdResponse.setText(cmdResponse.substring(cmd.length()));                  
                }                             
            } else {
                byte[] readBuffer = new byte[32];
//               //Read echo
//              sp.readBytes(readEcho, cmd.length() + 6);
//              cmdResponse = new String(readEcho);
//              if(Protocol.checkResponse(cmdIndex, cmdResponse)){
                sp.setComPortTimeouts(SerialPort.TIMEOUT_READ_BLOCKING, 50, 0);
                sp.readBytes(readBuffer, readBuffer.length);
                String cmdResp = new String(readBuffer);
                tfCmdResponse.setText(cmdResp);
//              } else{                    
//              }
            
       }
    
    }//GEN-LAST:event_bCmdSendActionPerformed
    
    }
    }
    }
    public static void main(String args[]) {
         /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ICmdResponse;
    private javax.swing.JLabel ICmdSelect;
    private javax.swing.JLabel ICmdText;
    private javax.swing.JLabel ICmdType;
    private javax.swing.JLabel ICmdValue;
    private javax.swing.JLabel ISerialPortBaudrate;
    private javax.swing.JLabel ISerialPortSelect;
    private javax.swing.JButton bCmdSend;
    private javax.swing.JButton bSerialPortConnect;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbCmdSelect;
    private javax.swing.JComboBox<String> cbSerialPortSelect;
    private java.awt.Checkbox checkbox1;
    private javax.swing.JRadioButton rbCmdTypeGet;
    private javax.swing.JRadioButton rbCmdTypeSet;
    private javax.swing.JTextField tfCmdResponse;
    private javax.swing.JTextField tfCmdText;
    private javax.swing.JTextField tfCmdValues;
    private javax.swing.JTextField tfSerialPortBaudrate;
    // End of variables declaration//GEN-END:variables
}
